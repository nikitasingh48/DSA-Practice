/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if (head==null){
            return null;
        }
        ListNode intersection=floydDetectLoop(head);
        if(intersection==null){
            return null;
        }
        ListNode slow=head;
        while(slow!=intersection) {
            slow=slow.next;
            intersection=intersection.next;
        }
        return slow;
    }
    
    public ListNode floydDetectLoop(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null) {
            slow=slow.next;
                fast=fast.next.next;
            if (slow==fast) {
                return slow;
            }
        }
        return null;
    }
}
