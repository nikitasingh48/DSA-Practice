/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null || head.next.next == null){
            return;
        }
        ListNode middle=findMiddle(head);
        ListNode firstHalf=head;
        ListNode secondHalf=middle.next;
        middle.next=null;
        ListNode secondHalfRev=reverseList(secondHalf);
        mergeTwoList(head,secondHalfRev);
    }
    public ListNode findMiddle(ListNode head){
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode reverseList(ListNode head){
        ListNode curr=head;
        ListNode prev=null;
        ListNode next;
        while(curr!=null){
           next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    public ListNode mergeTwoList(ListNode head1,ListNode head2){
        ListNode dummy=new ListNode(-1);
        ListNode temp=dummy;
        ListNode temp1=head1;
        ListNode temp2=head2;
        while(temp1!=null && temp2!=null){
            temp.next=temp1;
            temp=temp1;
            temp1=temp1.next;
            temp.next=temp2;
            temp=temp2;
            temp2=temp2.next; 
}
if(temp1!=null){
    temp.next=temp1;
        }
        else{
            temp.next=temp2;
        }
        return dummy.next;
    }
}
